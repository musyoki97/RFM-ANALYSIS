import pandas as pd

from datetime import datetime

import matplotlib.pyplot as plt


df = pd.read_excel(r"C:\Users\USER\PycharmProjects\rfm_data.xlsx")

print(df)


# Convert PurchaseDate to datetime
df['PurchaseDate'] = pd.to_datetime(df['PurchaseDate'], format='%d/%m/%Y')

# Calculate recency, frequency, and monetary values
current_date = max(df['PurchaseDate'])
rfm_df = df.groupby('CustomerID').agg({
    'PurchaseDate': lambda x: (current_date - x.max()).days,
    'OrderID': 'count',
    'TransactionAmount': 'sum'
}).reset_index()

# Rename the columns
rfm_df.columns = ['CustomerID', 'Recency', 'Frequency', 'Monetary']

# RFM Scoring
quantiles = rfm_df.quantile([0.25, 0.5, 0.75])
quantiles = quantiles.to_dict()

# Recency score
def recency_score(x, p, d):
    if x <= d[p][0.25]:
        return 4
    elif x <= d[p][0.50]:
        return 3
    elif x <= d[p][0.75]:
        return 2
    else:
        return 1

# Frequency and Monetary score
def fmq_score(x, p, d):
    if x <= d[p][0.25]:
        return 1
    elif x <= d[p][0.50]:
        return 2
    elif x <= d[p][0.75]:
        return 3
    else:
        return 4

rfm_df['R_Score'] = rfm_df['Recency'].apply(recency_score, args=('Recency', quantiles))
rfm_df['F_Score'] = rfm_df['Frequency'].apply(fmq_score, args=('Frequency', quantiles))
rfm_df['M_Score'] = rfm_df['Monetary'].apply(fmq_score, args=('Monetary', quantiles))

# Calculate RFM Score
rfm_df['RFM_Score'] = rfm_df['R_Score'] * 100 + rfm_df['F_Score'] * 10 + rfm_df['M_Score']

# Customer Segmentation
def segment_customer(rfm):
    if rfm['RFM_Score'] >= 331:
        return 'High-Value'
    elif rfm['RFM_Score'] >= 221:
        return 'Mid-Value'
    else:
        return 'Low-Value'

rfm_df['Segment'] = rfm_df.apply(segment_customer, axis=1)

# Count the number of customers in each segment
segment_counts = rfm_df['Segment'].value_counts()

# Create a bar plot to visualize the segments
plt.figure(figsize=(8, 6))
segment_counts.plot(kind='bar', color='skyblue')
plt.title('Customer Segmentation based on RFM Analysis')
plt.xlabel('Segment')
plt.ylabel('Number of Customers')

# Annotate the bars with segment counts
for i, count in enumerate(segment_counts):
    plt.text(i, count, str(count), ha='center', va='bottom')

plt.show()
